<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.5.2">Jekyll</generator><link href="http://localhost:4000/atom.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-07-16T20:39:12+08:00</updated><id>http://localhost:4000/</id><title type="html">To the Moon</title><subtitle>If you're with me, then everything's alright.</subtitle><author><name>Qi</name></author><entry><title type="html">字符编码</title><link href="http://localhost:4000/common/2018/07/05/character-coding/" rel="alternate" type="text/html" title="字符编码" /><published>2018-07-06T02:16:30+08:00</published><updated>2018-07-06T02:16:30+08:00</updated><id>http://localhost:4000/common/2018/07/05/character-coding</id><content type="html" xml:base="http://localhost:4000/common/2018/07/05/character-coding/">&lt;h2 id=&quot;字符字符集和字符编码&quot;&gt;字符、字符集和字符编码&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;table&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td&gt;字符&lt;/td&gt;
        &lt;td&gt;基本信息单元，字母、数字和标点等&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;字符集&lt;/td&gt;
        &lt;td&gt;字符集合，例如ASCII、GBK&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;字符编码&lt;/td&gt;
        &lt;td&gt;字符集的二进制编码方式&lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
&lt;/blockquote&gt;

&lt;p&gt;那么问题来了，我们常说的ASCII、GBK等都是指字符编码，为什么被列入字符集里了？&lt;/p&gt;

&lt;p&gt;实际上对于大部分的字符集来说，一个字符集智慧有一套编码，所以字符集即唯一确定了其编码。&lt;/p&gt;

&lt;p&gt;但是凡事总有例外，UNICODE字符集就是一个特例，UNICODE存在多种编码方式，包括UTF-8、UTF-16等。&lt;/p&gt;

&lt;h2 id=&quot;常见字符编码&quot;&gt;常见字符编码&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;ASCII&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;单字节编码字符集，最高位不使用，常设为0.

0~31及127为控制码，共33个

32~126是字符，共95个

空间占用：1字节
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;不够用了怎么办 -&amp;gt; LATIN-1（ISO-8859-1）&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ASCII扩展字符集，启用最高位。

0~127位与ASCII相同，新开启的128~255收录新字符。

空间占用：1字节
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;有中文了怎么办 -&amp;gt; GB2312&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;有中文了怎么办？常用中文字符有6000多个~

GB2312解决了中文问题，包含常用中文字符

0~127位与ASCII相同，高位其他字符取消，采用新规则：

当两个大于127的字符连在一起时，就表示一个汉字，前一个为高字节（0xA1到0xF7），后一个为低字节（0xA1到0xFE），可以组合出7000+的汉字。其中，高字节等于字符区号+0xA0，低字节等于字符所在区中的位置+0xA0。

同时，GB2312也对一些特殊字符、数字和标点等进行了重新编码，重新编码的这一批字符，就是我们常说的“全角”字符，而127位以下的这些字符就被称为“半角”字符。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;哎呀，中文那么多不够用啊 -&amp;gt; GBK&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;基于GB2312进行扩展，不再要求低字节一定是127之后的编码，只要第一个字节是大于127的，那么代表这是一个汉字的开始。

GBK包含了GB2312的所有内容，同时又增加了近20000个新的汉字。


看一个例子：

a机智

采用GBK编码后，以十六进制方式查看，结果为：

61bb fad6 c7

第一个字节小于127，和ASCII编码保持一致，可以直接查表得到61对应a；

之后一共4个字节，分别对应“机智”，查询后匹配bbfa对应”机“，d6c7对应”智”

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;繁体字  -&amp;gt; BIG5&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;虽然GBK支持少量繁体中文，但是数量有限，于是就出现了BIG5啦。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;ISO表示我坐不住了 -&amp;gt; UNICODE&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;不同的国家，不同的语言，编码太多，就会出现兼容、转换等问题。这时候，ISO坐不住了。

ISO统一了所有语言、字符和数字等编码，创建了UNICODE（Universal Multiple-Octet Coded Character Set），为了能够同时包含大量的字符，UNICODE使用2个字节来统一表示，对于ASCII中低于127位的字符保持不变，其他全部重新编码。

前面有提到，UNICODE是字符集，并不能代表字符编码，UNICODE拥有多种编码方式，包括为UTF-8、UTF-16。（UCS Transfer Format，UCS是UNICDOE的简称）
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;字符与字节&quot;&gt;字符与字节&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;不同的编码的字符串，其长度和大小怎么计算？

字符串长度：字符串的实际长度，计算字符长度，strlen结果；
字符串大小：字符串的空间占用大小，需要结合字符编码进行大小计算。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;mysql下的字符编码&quot;&gt;MySQL下的字符编码&lt;/h2&gt;

&lt;p&gt;show variables like ‘%character%’;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/Taaang/blog/blob/master/assets/images/post_imgs/img_mysql_coding.png?raw=true&quot; alt=&quot;mysql_coding&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;table&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td&gt;character_set_client&lt;/td&gt;
        &lt;td&gt;客户端字符编码&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;character_set_connection&lt;/td&gt;
        &lt;td&gt;网络传输数据的字符编码&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;character_set_database&lt;/td&gt;
        &lt;td&gt;服务端数据字符编码&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;character_set_filesystem&lt;/td&gt;
        &lt;td&gt;服务端文件名字符编码&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;character_set_results&lt;/td&gt;
        &lt;td&gt;服务端返回结果集的字符编码&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;character_set_server&lt;/td&gt;
        &lt;td&gt;服务端全局字符编码&lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;mysql字符集校对规则&quot;&gt;MySQL字符集校对规则&lt;/h2&gt;

&lt;p&gt;相同字符集内，字符比较和排序的规则。&lt;/p&gt;

&lt;p&gt;如果查看MySQL中，information_schema的CHARACTER_SETS，可以看到MySQL支持的字符集及其校对规则，例如：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/Taaang/blog/blob/master/assets/images/post_imgs/img_mysql_collate.png?raw=true&quot; alt=&quot;mysql_collate&quot; /&gt;&lt;/p&gt;

&lt;p&gt;图中显示了MySQL支持的字符集，以及对应字符集的校对规则、字符集中字符的长度。其中，不同的校对规则，会以_ci、_cs、_bin结尾，分别代表了不同的比对模式，_ci为大小写不敏感，_cs为大小写敏感，_bin为二进制比对。&lt;/p&gt;

&lt;h2 id=&quot;mysql表字符集修改&quot;&gt;MySQL表字符集修改&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;修改表字符集（新数据生效）
	ALTER TABLE  … CHARACTER SET …
修改表字符集（新旧数据生效）
	ALTER TABLE  … CONVERT TO CHARACTER SET …
修改当前会话字符集
	SET NAMES …（client、result、connection）
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><author><name>Qi</name></author><category term="Character Coding" /><summary type="html">字符、字符集和字符编码</summary></entry><entry><title type="html">ElasticSearch分组相关性写入</title><link href="http://localhost:4000/elasticsearch/2018/05/24/elasticsearch-group-write/" rel="alternate" type="text/html" title="ElasticSearch分组相关性写入" /><published>2018-05-25T07:31:30+08:00</published><updated>2018-05-25T07:31:30+08:00</updated><id>http://localhost:4000/elasticsearch/2018/05/24/elasticsearch-group-write</id><content type="html" xml:base="http://localhost:4000/elasticsearch/2018/05/24/elasticsearch-group-write/">&lt;p&gt;随着业务发展，越来越多的业务数据接入到Elasticsearch集群中，基于ES的全文索引和聚合分析功能进行简单的数据分析和日志查找。
在设计之初出于数据量和数据隔离的考虑，每个产品都以日期进行划分，生成数据索引。但是，随着新的产品越来越多，单个产品按日期划分，导致集群中的索引数量不断增加，ES集群的写入速度也越来越慢。&lt;/p&gt;

&lt;p&gt;起初我们对原因进行分析，认为是数据索引过多导致数据节点写入过慢。于是，在每天晚上定时对最近三天的数据进行分析，找出哪些产品的数据量比较小，并将数据量较小的数据索引进行合并，以减少索引数量；同时每天定时关闭一周前的数据索引转为冷数据，以减轻集群负担，使ES集群的写入和查询速度均得到提升。&lt;/p&gt;

&lt;p&gt;在持续稳定了一段时间后，写入速度又开始下降，只有正常情况下写入峰值的一半左右，而此时的索引数量仍在可接受的范围内，于是猜测写入较慢和索引数量之间的没有直接影响的关系，可能是与写入时的数据相关性有关。在进行数据写入时，由于数据本身基于产品进行划分，短时间大量不同产品数据的写入，会导致ES在处理一次数据提交时，需要将数据写入不同的索引。基于以上推测，我进行了一次关于数据相关性分组写入的测试。&lt;/p&gt;

&lt;p&gt;测试主要对相同总量，不同分组的数据进行写入测试，结果如下：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;宿主机环境&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;table&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td&gt;CPU&lt;/td&gt;
        &lt;td&gt;4核&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;内存&lt;/td&gt;
        &lt;td&gt;8G&lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;组件配置&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;table&gt;
    &lt;thead&gt;
      &lt;tr&gt;
        &lt;th style=&quot;text-align: center&quot;&gt;组件&lt;/th&gt;
        &lt;th style=&quot;text-align: center&quot;&gt;版本&lt;/th&gt;
      &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;Docker&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;1.12.6&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;Centos&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;Linux version 3.10.0­514.26.2.el7.x86_6&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;Elasticsearch&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;6.1&lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;ES参数配置&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;table&gt;
    &lt;thead&gt;
      &lt;tr&gt;
        &lt;th style=&quot;text-align: center&quot;&gt;参数&lt;/th&gt;
        &lt;th style=&quot;text-align: center&quot;&gt;值&lt;/th&gt;
      &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;ES数据节点数&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;索引分片数&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;分片副本数&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;thread_pool.index.queue_size&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;1000&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;thread_pool.index.size&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;写入策略&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;table&gt;
    &lt;thead&gt;
      &lt;tr&gt;
        &lt;th style=&quot;text-align: center&quot;&gt;参数&lt;/th&gt;
        &lt;th style=&quot;text-align: center&quot;&gt;值&lt;/th&gt;
      &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;数据总条数&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;20000&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;写入次数&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;100&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;单次批量写入数据量&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;200&lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;测试方式&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;在写入数据量配置相同的情况下，调整一次提交中数据写入的索引数，即把单次批量写入的200条数据，写入到不同的N个索引中进行测试&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;测试结果&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;table&gt;
    &lt;thead&gt;
      &lt;tr&gt;
        &lt;th style=&quot;text-align: center&quot;&gt;数据总数&lt;/th&gt;
        &lt;th style=&quot;text-align: center&quot;&gt;写入次数&lt;/th&gt;
        &lt;th style=&quot;text-align: center&quot;&gt;单次写入数据条数&lt;/th&gt;
        &lt;th style=&quot;text-align: center&quot;&gt;写入索引数N&lt;/th&gt;
        &lt;th style=&quot;text-align: center&quot;&gt;总耗时(ms)&lt;/th&gt;
        &lt;th style=&quot;text-align: center&quot;&gt;单次批量写入平均耗时(ms)&lt;/th&gt;
        &lt;th style=&quot;text-align: center&quot;&gt;单词批量写入最大耗时(ms)&lt;/th&gt;
      &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;20000&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;100&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;200&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;100&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;135895&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;1358&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;4301&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;20000&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;100&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;200&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;50&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;128403&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;1284&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;3716&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;20000&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;100&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;200&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;25&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;70075&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;700&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;1577&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;20000&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;100&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;200&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;10&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;34501&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;345&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;1062&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;20000&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;100&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;200&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;11326&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;113&lt;/td&gt;
        &lt;td style=&quot;text-align: center&quot;&gt;724&lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;结果分析&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;从结果中可以明显看出，单次批量写入的数据中，最终需要写入的索引数N越小，写入速度越快。
由此可以得出，在提交进行写入的数据中，数据分组相关性越高，最终写入的索引数越少，写入会越快。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;后记&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;后来基于这次的测试结果，我对数据写入的逻辑进行调整，将数据进行分组后写入，以此来提高数据分组相关性。
但是从最终测试结果来看，实际数据写入速度并没有太明显的提升。对原因进行分析后，发现原因如下：&lt;/p&gt;

  &lt;p&gt;之前对数据量较少的产品数据索引进行合并，部分不同产品的数据已经是写入到同一个合并后的索引。而在实际场景中，大部分产品的数据量都是很小的，绝大部分的产品数据都是写入到这个合并索引中，所以从另一个角度上减少了单次数据提交所需要写入的索引数，导致优化数据写入后的效果并不明显。&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Qi</name></author><category term="ElasticSearch" /><summary type="html">随着业务发展，越来越多的业务数据接入到Elasticsearch集群中，基于ES的全文索引和聚合分析功能进行简单的数据分析和日志查找。 在设计之初出于数据量和数据隔离的考虑，每个产品都以日期进行划分，生成数据索引。但是，随着新的产品越来越多，单个产品按日期划分，导致集群中的索引数量不断增加，ES集群的写入速度也越来越慢。</summary></entry><entry><title type="html">Java Jar包变更导致JVM崩溃问题</title><link href="http://localhost:4000/jvm/2018/04/02/jvm-crash-when-jar-modify/" rel="alternate" type="text/html" title="Java Jar包变更导致JVM崩溃问题" /><published>2018-04-02T18:23:10+08:00</published><updated>2018-04-02T18:23:10+08:00</updated><id>http://localhost:4000/jvm/2018/04/02/jvm-crash-when-jar-modify</id><content type="html" xml:base="http://localhost:4000/jvm/2018/04/02/jvm-crash-when-jar-modify/">&lt;p&gt;最近部分线上JAVA项目和Tomcat出现无规律性崩溃，崩溃信息主要为：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;异常（一）
JException in thread &quot;data_send_thread_1&quot; java.lang.NoClassDefFoundError: com/****/StreamResetException
        ...
        at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
        at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
        ... 10 more
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;或者&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;异常（二）
Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
J 128  java.util.zip.ZipFile.getEntry(J[BZ)J (0 bytes) @ 0x00007f62450db198 [0x00007f62450db140+0x58]
J 103670 C2 sun.misc.URLClassPath$JarLoader.getResource(Ljava/lang/String;Z)Lsun/misc/Resource; (85 bytes)
J 92261 C2 java.net.URLClassLoader$2.run()Ljava/lang/Object; (5 bytes) @ 0x00007f624b5aa3c0 [0x00007f624b5aa280+0x140]
v  ~StubRoutines::call_stub
J 933  java.security.AccessController.doPrivileged(Ljava/security/PrivilegedAction;Ljava/security/AccessControlContext;)Ljava/lang/Object;
J 107440 C2 java.net.URLClassLoader.findResource(Ljava/lang/String;)Ljava/net/URL; (37 bytes) @ 0x00007f624df35394 [0x00007f624df35300+0x94]
J 107175 C2 java.lang.ClassLoader.getResource(Ljava/lang/String;)Ljava/net/URL; (36 bytes) @ 0x00007f6249f14f28 [0x00007f6249f14da0+0x188]
J 107117 C2 org.apache.catalina.loader.WebappClassLoaderBase.getResourceAsStream(Ljava/lang/String;)Ljava/io/InputStream; (354 bytes)
J 107084 C2 org.apache.catalina.startup.ContextConfig.checkHandlesTypes(Lorg/apache/tomcat/util/bcel/classfile/JavaClass;)V (462 bytes)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;可以看出，崩溃原因均可归结为Class加载失败导致的，而加载的这个Class是一个JAVA Agent中的一个类。&lt;/p&gt;

&lt;h2 id=&quot;异常一线程进行类加载时抛出&quot;&gt;异常（一）：线程进行类加载时抛出&lt;/h2&gt;

&lt;p&gt;当对象创建时，ClassLoader会先判断对象对应的类是否已经加载过，如果没有，则会优先进行加载。但在当前场景下，ClassLoader进行类加载时，抛出了NoClassDefFoundError异常。&lt;/p&gt;

&lt;p&gt;其中，NoClassDefFoundError与ClassNotFoundException是有区别的。ClassNotFoundException是在进行动态类加载时出现，往往实现不知道这个类是否存在，比如调用Class.forName，通过反射进行类加载时容易出现这个异常；NoClassDefFoundError遇到的并不多，一般是在编译时明确该类存在，但是在运行时进行加载的时候，找不到该类的定义。&lt;/p&gt;

&lt;h2 id=&quot;异常二tomcat类加载时抛出&quot;&gt;异常（二）：Tomcat类加载时抛出&lt;/h2&gt;

&lt;p&gt;Tomcat作为Web应用容器，为每一个Web应用创建一个单独的WebAppClassLoader，用于加载这个应用所需要的类，同时也以此将不同项目所需要的类隔离开来。从异常信息可以看出，当ClassLoader尝试去加载一个类时，首先进行Jar包扫描，找到对应的Class在哪个Jar报中，然后通过特殊的权限控制方式，读取Jar包进行类加载。而Jar包本身以Zip格式为基础，所以通过ZipFile获取文件入口，而此时抛出异常。&lt;/p&gt;

&lt;h2 id=&quot;异常分析&quot;&gt;异常分析&lt;/h2&gt;

&lt;p&gt; 1.  NoClassDefFoundError为JVM运行时异常，是在尝试加载Class时无法找到抛出的；&lt;/p&gt;

&lt;p&gt; 2.  对Tomcat源码进行调试，发现在AppClassLoader中，包含宝对应Java Agent的JAR包路径，并在加载过程中检查该JAR包中是否包含对应的Class，相关代码如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;URLClassLoader.java


protected Class&amp;lt;?&amp;gt; findClass(final String name)
    throws ClassNotFoundException
{
    final Class&amp;lt;?&amp;gt; result;
    try {
        result = AccessController.doPrivileged(
            new PrivilegedExceptionAction&amp;lt;Class&amp;lt;?&amp;gt;&amp;gt;() {
                public Class&amp;lt;?&amp;gt; run() throws ClassNotFoundException {
                    String path = name.replace('.', '/').concat(&quot;.class&quot;);
                    Resource res = ucp.getResource(path, false);
                    if (res != null) {
                        try {
                            return defineClass(name, res);
                        } catch (IOException e) {
                            throw new ClassNotFoundException(name, e);
                        }
                    } else {
                        return null;
                    }
                }
            }, acc);
    } catch (java.security.PrivilegedActionException pae) {
        throw (ClassNotFoundException) pae.getException();
    }
    if (result == null) {
        throw new ClassNotFoundException(name);
    }
    return result;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;其中，&lt;code class=&quot;highlighter-rouge&quot;&gt;ucp.getResource(path, false)&lt;/code&gt;尝试对指定类的ClassPath进行加载，遍历当前ClassLoader所包含的所有JAR包资源，利用ZipFile的getEntry方法，从jar包中搜索对应的Class信息，相关代码如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ZipFile.java


/**
 * Returns the zip file entry for the specified name, or null
 * if not found.
 *
 * @param name the name of the entry
 * @return the zip file entry, or null if not found
 * @throws IllegalStateException if the zip file has been closed
 */
public ZipEntry getEntry(String name) {
    if (name == null) {
        throw new NullPointerException(&quot;name&quot;);
    }
    long jzentry = 0;
    synchronized (this) {
        ensureOpen();
        jzentry = getEntry(jzfile, zc.getBytes(name), true);
        if (jzentry != 0) {
            ZipEntry ze = getZipEntry(name, jzentry);
            freeEntry(jzfile, jzentry);
            return ze;
        }
    }
    return null;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;正常情况下在JAVA Agent的JAR包中搜索，能找到对应的Class信息，即getEntry方法返回非0；而出现异常时，getEntry方法返回0。&lt;/p&gt;

&lt;p&gt; 3.  使用strace查看getEntry时对应的系统调用，结果如下：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;（1）Class加载成功时，可以从对应的JAR包中读取到Class信息&lt;/strong&gt;
&lt;img src=&quot;https://github.com/Taaang/blog/blob/master/assets/images/post_imgs/img_jvm_crash_1.png?raw=true&quot; alt=&quot;Strace_normal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;（2）Class加载异常时，无法读取到Class信息&lt;/strong&gt;
&lt;img src=&quot;https://github.com/Taaang/blog/blob/master/assets/images/post_imgs/img_jvm_crash_2.png?raw=true&quot; alt=&quot;Strace_error&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以看到在对JAR包中Class进行加载时，找不到对应的Class。但是，实际上使用解压或者使用JD-GUI查看其内容时，是能够找到编译后的Class文件，所以该类是存在的。那么问题来了，为什么明明有却会说找不到？&lt;/p&gt;

&lt;h2 id=&quot;问题原因&quot;&gt;问题原因&lt;/h2&gt;

&lt;p&gt;最终，根据错误的异常信息，在Java官网找到了相似的异常，其实这是JAVA本身就存在的一个问题：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ID 1296729.1

Java Virtual Machine (JVM) crashes in java.util.zip.ZipFile.getEntry() during Class Loading (文档 ID 1296729.1） -  Random crashes during classloading while a jar/zip file is being accessed.  Here is a typical stack trace. Please notice that a custom classloader calls java.util.zip.ZipFile.getEntry() and the crash happens somewhere in libzip or libc or a native windows dll：

tack: [0xfffffffe4e900000,0xfffffffe4e940000], sp=0xfffffffe4e93b1a0, free space=236k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
C [libc_psr.so.1+0xbf4]
C [libzip.so+0xe280]
C [libzip.so+0x28e8]
C [libzip.so+0x2d9c]
J java.util.zip.ZipFile.getEntry(JLjava/lang/String;Z)J
J java.util.zip.ZipFile.getEntry(Ljava/lang/String;)Ljava/util/zip/ZipEntry;
J weblogic.utils.classloaders.JarClassFinder.getSource(Ljava/lang/String;)Lweblogic/utils/classloaders/Source;
J weblogic.utils.classloaders.AbstractClassFinder.getClassSource(Ljava/lang/String;)Lweblogic/utils/classloaders/Source;
J weblogic.utils.classloaders.MultiClassFinder.getClassSource(Ljava/lang/String;)Lweblogic/utils/classloaders/Source;
J weblogic.utils.classloaders.MultiClassFinder.getClassSource(Ljava/lang/String;)Lweblogic/utils/classloaders/Source;
J weblogic.utils.classloaders.MultiClassFinder.getClassSource(Ljava/lang/String;)Lweblogic/utils/classloaders/Source;
j weblogic.application.utils.CompositeWebAppFinder.getClassSource(Ljava/lang/String;)Lweblogic/utils/classloaders/Source;
J weblogic.utils.classloaders.MultiClassFinder.getClassSource(Ljava/lang/String;)Lweblogic/utils/classloaders/Source;
J weblogic.utils.classloaders.MultiClassFinder.getClassSource(Ljava/lang/String;)Lweblogic/utils/classloaders/Source;
j weblogic.utils.classloaders.CodeGenClassFinder.getClassSource(Ljava/lang/String;)Lweblogic/utils/classloaders/Source;
j weblogic.utils.classloaders.GenericClassLoader.findLocalClass(Ljava/lang/String;)Ljava/lang/Class;
j weblogic.utils.classloaders.GenericClassLoader.findClass(Ljava/lang/String;)Ljava/lang/Class;
j weblogic.utils.classloaders.ChangeAwareClassLoader.findClass(Ljava/lang/String;)Ljava/lang/Class;
J java.lang.ClassLoader.loadClass(Ljava/lang/String;Z)Ljava/lang/Class;
J weblogic.utils.classloaders.ChangeAwareClassLoader.loadClass(Ljava/lang/String;)Ljava/lang/Class;
j java.lang.ClassLoader.loadClassInternal(Ljava/lang/String;)Ljava/lang/Class;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;其中，三种情况可能导致该问题发生：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;There are three possible scenarios here:

1. While a class is in use it is dynamically reloaded from a jar file.
2. While a jar file is being accessed by the class loader, the jar file is being modified.
3. A Jarfile which was bigger than 4GB was accessed (applies to Java 6 and earlier only)


Please note that a crash may happen even a long time after a jarfile was modified as classloaders keep references to jarfiles.

Another possible sceanrio is when Java or the application itself is being patched while the application is running.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;而这次问题的发生是由于第二点引起的，我们在对JAVA Agent版本进行更新时，是使用覆盖源文件的方式进行，随着Tomcat或者JVM重启去重新加载新的Agent JAR包。&lt;/p&gt;

&lt;p&gt;在更新JAR包，由于JVM还是保持着原JAR包的引用，所以再尝试从JAR包中进行Class加载时抛出异常，导致JVM崩溃。&lt;/p&gt;

&lt;p&gt;其中有一点比较关键的是，即使在JAR包变更后很长一段时间，也会出现这个问题，原因是因为在正常情况下，业务主要流程已经都跑过一次，依赖的类已经加载过，所以很少触发新的类加载，而当应用走到某个很少触发的业务逻辑或者抛出某个未加载过的异常，需要从该变更过的JAR包中进行Class加载时，就会产生这个现象。&lt;/p&gt;

&lt;h2 id=&quot;解决方案&quot;&gt;解决方案&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. StackOverFlow中有大佬表示可通过升级使用JAVA 9来解决，JDK9 early access builds已经解决该问题。
（https://stackoverflow.com/questions/38326183/jvm-crashed-in-java-util-zip-zipfile-getentry）
2. 启动时关闭MemoryMapping。JAVA Bug Fixs - 6929479
（http://www.oracle.com/us/technologies/java/overview-156328.html）
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><author><name>Qi</name></author><category term="JVM" /><summary type="html">最近部分线上JAVA项目和Tomcat出现无规律性崩溃，崩溃信息主要为： 异常（一） JException in thread &quot;data_send_thread_1&quot; java.lang.NoClassDefFoundError: com/****/StreamResetException ... at java.lang.ClassLoader.loadClass(ClassLoader.java:424) at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331) at java.lang.ClassLoader.loadClass(ClassLoader.java:357) ... 10 more 或者 异常（二） Java frames: (J=compiled Java code, j=interpreted, Vv=VM code) J 128 java.util.zip.ZipFile.getEntry(J[BZ)J (0 bytes) @ 0x00007f62450db198 [0x00007f62450db140+0x58] J 103670 C2 sun.misc.URLClassPath$JarLoader.getResource(Ljava/lang/String;Z)Lsun/misc/Resource; (85 bytes) J 92261 C2 java.net.URLClassLoader$2.run()Ljava/lang/Object; (5 bytes) @ 0x00007f624b5aa3c0 [0x00007f624b5aa280+0x140] v ~StubRoutines::call_stub J 933 java.security.AccessController.doPrivileged(Ljava/security/PrivilegedAction;Ljava/security/AccessControlContext;)Ljava/lang/Object; J 107440 C2 java.net.URLClassLoader.findResource(Ljava/lang/String;)Ljava/net/URL; (37 bytes) @ 0x00007f624df35394 [0x00007f624df35300+0x94] J 107175 C2 java.lang.ClassLoader.getResource(Ljava/lang/String;)Ljava/net/URL; (36 bytes) @ 0x00007f6249f14f28 [0x00007f6249f14da0+0x188] J 107117 C2 org.apache.catalina.loader.WebappClassLoaderBase.getResourceAsStream(Ljava/lang/String;)Ljava/io/InputStream; (354 bytes) J 107084 C2 org.apache.catalina.startup.ContextConfig.checkHandlesTypes(Lorg/apache/tomcat/util/bcel/classfile/JavaClass;)V (462 bytes)</summary></entry></feed>